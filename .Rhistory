# Chunk 8
#| fig-cap: "Imagem raster feita a partir de uma banda azul."
#| fig-align: left
#| echo: false
sp::plot(img_blue)
# Chunk 9
#| fig-cap: 'Imagem binária feita com o método "Minimum".'
#| fig-align: left
img_lim_min <- thd_blue(img_blue, method = "Minimum", display = TRUE)
# Chunk 10
#| fig-cap: 'Imagem binária feita com o método "Default".'
#| fig-align: left
img_lim_def <- thd_blue(img_blue, method = "Default", display = TRUE)
# Chunk 11
img_min_gaps <- label_gaps(img_lim_min)
# Chunk 12
#| fig-cap: "Minimum"
#| echo: false
#| fig-align: left
sp::plot(img_min_gaps)
# Chunk 13
img_def_gaps <- label_gaps(img_lim_def)
# Chunk 14
#| fig-cap: "Default"
#| echo: false
#| fig-align: left
sp::plot(img_def_gaps)
# Chunk 15
# Macfarlane
df_min_mac <- extract_gap(img_min_gaps, gapmethod = "macfarlane")
kable(head(df_min_mac))
# Alivernini
df_min_ali <- extract_gap(img_min_gaps, gapmethod = "alivernini")
kable(head(df_min_ali))
# Chunk 16
# Macfarlane
df_def_mac <- extract_gap(img_def_gaps, gapmethod = "macfarlane")
kable(head(df_min_mac))
# Alivernini
df_def_ali <- extract_gap(img_def_gaps, gapmethod = "alivernini")
kable(head(df_min_ali))
# Chunk 17
df2_min_mac <- get_canopy(df_min_mac)
# Chunk 18
# Macfarlane
df2_min_mac <- get_canopy(df_min_mac)
kable(df2_min_mac)
# Alivernini
df2_min_ali <- get_canopy(df_min_ali)
kable(df2_min_ali)
kable(df2_min_mac)
bind_rows(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
# Macfarlane
df2_min_mac <- get_canopy(df_min_mac)
kable(df2_min_mac)
# Alivernini
df2_min_ali <- get_canopy(df_min_ali)
kable(df2_min_ali)
# Alivernini
df2_min_ali <- get_canopy(df_min_ali)
kable(df2_min_ali)
- Método _"Default"_
# Alivernini
df2_def_ali <- get_canopy(df_def_ali)
# Macfarlane
df2_def_mac <- get_canopy(df_def_mac)
kable(df2_def_mac)
bind_rows(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
dplyr::bind_rows(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
df2_min_mac
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali) |>
select(CF = FC,
CD = CC,
CD = CP)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali) |>
select(CF = FC,
CD = CC,
CD = CP)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali) |>
dplyr::select(CF = FC,
CD = CC,
CD = CP)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali) |>
dplyr::select(CF = FC,
CD = CC,
CD = CP,
gapmethod,
method)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
df2_min_mac
df2_min_mac
df2_min_ali
df2_def_mac
df2_def_ali
bind_rows(df2_min_mac, df2_min_ali, df2_def_mac, df2_def_ali)
glimpse(df2_min_mac)
glimpse(df2_def_ali)
glimpse(df2_min_mac)
glimpse(df2_min_ali)
glimpse(df2_def_mac)
glimpse(df2_def_ali)
bind_rows(df2_min_mac, df2_min_ali, df2_def_mac, df2_def_ali)
#| echo: false
sel_c <- function(data) {
data |>
select(FC, CC, CP, gapmethod, method)
}
map(df2_min_mac, sel_c)
#| echo: false
sel_c <- function(data) {
data %>%
select(FC, CC, CP, gapmethod, method)
}
map(df2_min_mac, sel_c)
#| echo: false
sel_c <- function(data) {
data |>
dplyr::select(FC, CC, CP, gapmethod, method)
}
map(df2_min_mac, sel_c)
purrr::map(df2_min_mac, sel_c)
sel_c(df2_min_mac)
rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
a <- rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
a
#| echo: false
a <- rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
kable(a)
kable(a) |>
select(CF = FC,
CD = CC,
PD = PD)
a |>
select(CF = FC,
CD = CC,
PD = PD) |>
kable()
a
a |>
select(CF = FC,
CD = CC,
PD = CP) |>
kable()
#| echo: false
a <- rbind(df = c("Minimum - Macfarlane",
"Minimum - Alivernini",
"Default - Macfarlane",
"Minimum - Alivernini",),
df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
#| echo: false
a <- rbind(df = c("Minimum - Macfarlane",
"Minimum - Alivernini",
"Default - Macfarlane",
"Minimum - Alivernini"),
df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali)
a
#| echo: false
a <- rbind(df2_min_mac,
df2_min_ali,
df2_def_mac,
df2_def_ali) |>
cbind(df = c("Minimum - Macfarlane",
"Minimum - Alivernini",
"Default - Macfarlane",
"Minimum - Alivernini"))
a
images |>
purrr::map(coveR, method = "Minimum", gapmethod = "macfarlane") |>
dplyr::bind_rows() |>
kable()
images
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
library(dplyr)
library(ggplot2)
library(janitor)
library(readr)
library(tidyr)
lotofacil <- read_csv("/home/ricardo/Documents/git/blogR/posts/008-lotofacil/lotofacil.csv") |>
clean_names()
here::here()
here::here("posts/008-lotofacil/lotofacil.csv")
lotofacil <- read_csv(here::here("posts/008-lotofacil/lotofacil.csv")) |>
clean_names()
lotofacil
head(lotofacil)
lf_long <- lotofacil |>
pivot_longer(cols = c(bola_1:bola_15), names_to = "ordem", values_to = "bola")
lf_long
todos <- lf_long |>
group_by(bola) |>
tally()
todos <- lf_long |>
group_by(bola) |>
tally()
ggplot(data = todos, aes(x = bola, y = n)) +
geom_col(position = position_dodge2(),
fill = ifelse(todos$bola %in% head(order(desc(todos$n)), 15),"#A2CDF1", "white"),
alpha = 0.8) +
scale_x_continuous(breaks = 1:25) +
scale_y_continuous(breaks = seq(0, 1750, 250)) +
geom_text(aes(y = n, label = n), vjust = 1.5, size = 3) +
labs(x = "Bola",
y = "Frequência de saída") +
theme_dark() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
themeB <- function() {
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
}
bolas <- lf_long |>
group_by(ordem, bola) |>
tally()
ggplot(data = bolas, aes(x = ordem, y = n, group = bola)) +
geom_col(position = position_dodge2(),
fill = "#A2CDF1",
alpha = 0.8) +
themeB() +
facet_wrap(~bola)
bolas |>
group_by(bola, ordem) |>
summarise(max(n)) |>  View()
lotofacil <- read_csv(here::here("posts/008-lotofacil/lotofacil.csv")) |>
clean_names()
head(lotofacil)
kable(tail(lotofacil))
tail(lotofacil)
kable(arrange(tail(lotofacil), concurso))
arrange(tail(lotofacil), concurso)
todos
todos |>
arrange(n)
todos |>
arrange(n) |>
head(n = 15)
todos |>
arrange(desc(n)) |>
head(n = 15) |>
kable()
todos |>
arrange(desc(n)) |>
head(n = 15)
#| echo: false
ggplot(data = todos, aes(x = bola, y = n)) +
geom_col(position = position_dodge2(),
fill = ifelse(todos$bola %in% head(order(desc(todos$n)), 15),"#A2CDF1", "white"),
alpha = 0.8) +
scale_x_continuous(breaks = 1:25) +
scale_y_continuous(breaks = seq(0, 1750, 250)) +
geom_text(aes(y = n, label = n), vjust = 1.5, size = 1) +
labs(x = "Bola",
y = "Frequência de saída") +
theme_dark() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
lotofacil
#| echo: false
lf_long <- lotofacil |>
pivot_longer(cols = c(bola_1:bola_15), names_to = "ordem", values_to = "numero")
lf_long
todos <- lf_long |>
group_by(numero) |>
tally()
todos
#| echo: false
ggplot(data = todos, aes(x = numero, y = n)) +
geom_col(position = position_dodge2(),
fill = ifelse(todos$numero %in% head(order(desc(todos$n)), 15),"#A2CDF1", "white"),
alpha = 0.8) +
scale_x_continuous(breaks = 1:25) +
scale_y_continuous(breaks = seq(0, 1750, 250)) +
geom_text(aes(y = n, label = n), vjust = 1.5, size = 2) +
labs(x = "Número",
y = "Frequência de saída") +
theme_dark() +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
todos |>
arrange(desc(n)) |>
head(n = 15) |>
kable()
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
themeB <- function() {
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
axis.title = element_text(color = "#FFF461", face = "bold", size = 14),
axis.text = element_text(color = "#FFF461", size = 10),
axis.line = element_line(color = "yellow"),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
}
numeros <- lf_long |>
group_by(ordem, numero) |>
tally()
numeros
ggplot(data = numeros, aes(x = ordem, y = n, group = numero)) +
geom_col(position = position_dodge2(),
fill = "#A2CDF1",
alpha = 0.8) +
themeB() +
facet_wrap(~numero)
numeros |>
group_by(numero, ordem) |>
summarise(max(n)) |>  View()
todos |>
arrange(desc(n)) |>
head(n = 15) |>
kable()
todos |>
arrange(desc(n)) |>
head(n = 15)
todos |>
arrange(desc(n)) |>
head(n = 15) |>
arrange(n)
todos |>
arrange(desc(n)) |>
head(n = 15)
todos |>
arrange(desc(n)) |>
head(n = 15) |>
arrange(n)
numeros <- lf_long |>
group_by(ordem, numero) |>
tally()
numeros
numeros |>
group_by(numero, ordem) |>
summarise(max(n))
numeros |>
group_by(numero, ordem) |>
summarise(max(n)) |> View()
numeros |>
group_by(numero, ordem) |>
summarise(max(n))
numeros |>
group_by(numero, ordem) |>
summarise(max(n)) |> View()
numeros
numeros
numeros |>
arrange(desc(n))
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero, .keep_all = TRUE) |>
group_by(ordem) |>
summarise(n = sum(n))
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero, .keep_all = TRUE)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem)
numeros |>
arrange(desc(n))
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero, .keep_all = FALSE)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero)
numeros |>
arrange(desc(n)) |>
unique(ordem, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
sample_n(1)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
group_by(ordem)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
group_by(ordem) |>
slice_max()
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
group_by(ordem) |>
slice_max(numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
group_by(ordem) |>
slice_max(ordem)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
slice_max(ordem)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
top_n(n = 1)
numeros |>
arrange(desc(n)) |>
distinct(ordem, numero) |>
top_n(n = 1, wt = numero)
numeros
todos
numeros
numeros |>
arrange(desc(n))
numeros |>
arrange(desc(n)) |>
slice_max(order_by = ordem)
numeros |>
arrange(desc(n)) |>
slice_max(order_by = ordem, weight_by = n)
numeros |>
arrange(desc(n)) |>
slice_max(order_by = ordem, weight_by = n)
numeros |>
arrange(desc(n)) |>
slice_max(order_by = ordem, with_ties = FALSE)
numeros |>
arrange(desc(n))
numeros |>
arrange(desc(n)) |> View()
