[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to my blogR",
    "section": "",
    "text": "Cheers!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ricardo R. da Silveira Filho",
    "section": "",
    "text": "I am a brazilian biologist and data scientist, curious about all sort of things. Here I want to share same tips, ideas, and thoughts that come to my head with you all.\nFeel yourself at home ^^"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "#blogR",
    "section": "",
    "text": "ensinandoR\n\n\npipe\n\n\npt-br\n\n\nR\n\n\ntidyverse\n\n\n\n\n\n\n\nRicardo\n\n\nOct 18, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npt-br\n\n\nR\n\n\nThe Office\n\n\ntidyverse\n\n\n\n\n\n\n\nRicardo\n\n\nOct 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nggplot2\n\n\nR\n\n\ntips\n\n\n\n\n\n\n\nRicardo\n\n\nOct 14, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nggplot2\n\n\nLula\n\n\nPT\n\n\nR\n\n\nstar\n\n\n\n\n\n\n\nRicardo\n\n\nOct 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\nRicardo\n\n\nOct 10, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Ricardo R. da Silveira Filho",
    "section": "Education",
    "text": "Education\nUniversidade Federal da Paraíba | João Pessoa, PB, Brazil\nPh.D. in Biological Sciences (Zoology) | 2013–2017\nUniversidade Federal da Paraíba | João Pessoa, PB, Brazil\nM.Sc. in Biological Sciences (Zoology) | 2010–2012\nUniversidade Estadual de Feira de Santana | Feira de Santana, BA, Brazil\nUndergrad in Biological Sciences | 2004–2009"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Ricardo R. da Silveira Filho",
    "section": "Experience",
    "text": "Experience\nUFRN | Post-Doctoral Fellow | 2022–\nConciso-TI | Head Data Scientist | 2020–\nUNEMAT | Post-Doctoral Fellow | 2018–2019"
  },
  {
    "objectID": "posts/001. welcome/index.html",
    "href": "posts/001. welcome/index.html",
    "title": "Welcome to my blogR",
    "section": "",
    "text": "Cheers!"
  },
  {
    "objectID": "posts/002. star/index.html",
    "href": "posts/002. star/index.html",
    "title": "Drawing a star in R with ggplot",
    "section": "",
    "text": "I am a workers party supporter (PT, Partido dos Trabalhadores), with Lula as our candidate.\n\n\n\n\n\nFigure 1: Lulinha peace and love <3\n\n\n\n\nWith this being told, the PT flag is a white star in a red background, my plan is to draw this, showing all the steps to do it.\nFirst of all, we will need to load ggplot2, the package that we will use in this session:\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "posts/001-welcome/index.html",
    "href": "posts/001-welcome/index.html",
    "title": "Welcome to my blogR",
    "section": "",
    "text": "Cheers!"
  },
  {
    "objectID": "posts/002-star/index.html",
    "href": "posts/002-star/index.html",
    "title": "Drawing a star in R with ggplot",
    "section": "",
    "text": "Drawing a star using ggplot2 in R Language."
  },
  {
    "objectID": "posts/002-star/index.html#history",
    "href": "posts/002-star/index.html#history",
    "title": "Drawing a star in R with ggplot",
    "section": "History:",
    "text": "History:\nIn Brazil we are about to choose the next President for the 4 years ahead.\nI am a workers party supporter (PT, Partido dos Trabalhadores), with Lula as our candidate.\n\n\n\n\n\nFigure 1: Lulinha peace and love <3\n\n\n\n\nWith this being told, the PT flag is a white star in a red background, my plan is to draw this, showing all the steps to do it."
  },
  {
    "objectID": "posts/002-star/index.html#hands-on",
    "href": "posts/002-star/index.html#hands-on",
    "title": "Drawing a star in R with ggplot",
    "section": "Hands on!",
    "text": "Hands on!\nFirst of all, we will need to load dplyr and ggplot2, the package of functions that we will use in this session:\n\nlibrary(dplyr) # data wrangling\nlibrary(ggplot2) # plots\n\nLet’s start by creating our blank canvas:\n\nggplot()\n\n\n\n\nBlank canvas.\n\n\n\n\nNow we can ask to ggplot to put a void theme (without texts or axis), and then to add a red background:\n\nred <- ggplot() +\n    theme_void() +\n    theme(plot.background = element_rect(fill = \"red\"))\n\nred\n\n\n\n\nRed canvas.\n\n\n\n\nThe challenge now is to draw by draft our star. First, let’s study how it is:\n\n\n\n\n\nFigure 2: A star and its coordinates.\n\n\n\n\nTo do this, let’s create a tibble with the x and y coordinates (11 to close the polygon):\n\nr <- rep_len(x = c(100, 100 * sin(pi/10) / cos(pi/5)), \n             length.out = 11)\n\nstar <- tibble(coord = 1:11,\n               x = r * sin(seq(0, 2 * pi, length.out = 11)),\n               y = r * cos(seq(0, 2 * pi, length.out = 11)))\n\nknitr::kable(star, align = \"c\")\n\n\n\n\ncoord\nx\ny\n\n\n\n\n1\n0.00000\n100.0000\n\n\n2\n22.45140\n30.9017\n\n\n3\n95.10565\n30.9017\n\n\n4\n36.32713\n-11.8034\n\n\n5\n58.77853\n-80.9017\n\n\n6\n0.00000\n-38.1966\n\n\n7\n-58.77853\n-80.9017\n\n\n8\n-36.32713\n-11.8034\n\n\n9\n-95.10565\n30.9017\n\n\n10\n-22.45140\n30.9017\n\n\n11\n0.00000\n100.0000\n\n\n\nStar coordinates.\n\n\nNow, let’s include the star coordinates (and the paths) within the red plot:\n\nred +\n    geom_polygon(data = star, mapping = aes(x = x, y = y))\n\n\n\n\nAlmost there.\n\n\n\n\nThe next step is to paint the star in white color, and also fix the coordinates:\n\npt <- red +\n    geom_polygon(data = star, mapping = aes(x = x, y = y),\n                 fill = \"white\") +\n    coord_equal()\n\npt \n\n\n\n\nThe workers party flag!\n\n\n\n\nOur PT flag is ready!\nJust to complete, we can include the number of the party in the middle of the star, the number 13!\n\npt +\n    annotate(geom = \"text\",\n             label = 13,\n             x = -4,\n             y = 0,\n             size = 40,\n             color = \"red\")\n\n\n\n\nIt is ready!\n\n\n\n\nWe have our flag!"
  },
  {
    "objectID": "posts/003-ggplot-tip/index.html",
    "href": "posts/003-ggplot-tip/index.html",
    "title": "A great ggplot tip!",
    "section": "",
    "text": "ggplot2 tips"
  },
  {
    "objectID": "posts/003-ggplot-tip/index.html#history",
    "href": "posts/003-ggplot-tip/index.html#history",
    "title": "A great ggplot tip!",
    "section": "History",
    "text": "History\nSome time ago, lost through the deep arms of the internet 😎, I have found a great drawing with all the theme elements references of a plot within ggplot2.\nBut, as is well known, if you don’t save that, it will be lost forever.\nExcept when you have a great community on twitter, and there is a bunch of good people trying to help everyone!\nSome time ahead…\nI finally found it! Here it is:\n\n\n\n\n\nFigure 1: ggplot2 theme elements references, by Isabella Benabaye.\n\n\n\n\nI also found the post on her blog, with better quality images and/or a pdf file."
  },
  {
    "objectID": "posts/003-ggplot-tip/index.html#the-history-continues",
    "href": "posts/003-ggplot-tip/index.html#the-history-continues",
    "title": "A great ggplot tip!",
    "section": "The history continues…",
    "text": "The history continues…\nMore interesting: actually, she had her idea after this twitter post from Henry Wang:\n\n\n\n\n\nFigure 2: Henry Wang’s tweet.\n\n\n\n\nAnd, he also made a nice post about the subject (where you can download his version of ggplot2 theme elements demonstration)."
  },
  {
    "objectID": "posts/003-ggplot-tip/index.html#finishing",
    "href": "posts/003-ggplot-tip/index.html#finishing",
    "title": "A great ggplot tip!",
    "section": "Finishing",
    "text": "Finishing\nThat’s it, enjoy the creativity and good ideas from all these people, soon I’ll bring some more.\nThanks for the reading, cheers!"
  },
  {
    "objectID": "posts/002-star/index.html#finishing",
    "href": "posts/002-star/index.html#finishing",
    "title": "Drawing a star in R with ggplot",
    "section": "Finishing",
    "text": "Finishing\nThe next step is to dress all red at October 30th 2022, vote in our great eletronic voting machines, and hope for the best!\nMake the L!\n\n\n\n\n\nFigure 3: Faz o L!\n\n\n\n\nCheers,"
  },
  {
    "objectID": "posts/003-ggplot-tip/index.html#what-this-post-is-about",
    "href": "posts/003-ggplot-tip/index.html#what-this-post-is-about",
    "title": "A great ggplot tip!",
    "section": "What this post is about?",
    "text": "What this post is about?\n\nggplot2 tips"
  },
  {
    "objectID": "posts/002-star/index.html#what-this-post-is-about",
    "href": "posts/002-star/index.html#what-this-post-is-about",
    "title": "Drawing a star in R with ggplot",
    "section": "What this post is about?",
    "text": "What this post is about?\n\nDrawing a star using ggplot2 in R Language."
  },
  {
    "objectID": "posts/004-explorando-the-office/index.html",
    "href": "posts/004-explorando-the-office/index.html",
    "title": "Explorando o mundo de The Office",
    "section": "",
    "text": "A melhor série de todos os tempos;\nImportando dados da internet;\nColetando algumas informações utilizando dplyr."
  },
  {
    "objectID": "posts/004-explorando-the-office/index.html#história",
    "href": "posts/004-explorando-the-office/index.html#história",
    "title": "Explorando o mundo de The Office",
    "section": "História",
    "text": "História\nEstava eu pensando sobre uma nova postagem para o blog, quando recebi no meu telefone uma notificação do reddit, com o título “Every line from Every Episode of ‘The Office (US)’” – Todas as falas de todos os episódios do The Office (EUA). Sem pensar duas vezes, fui dar uma olhada.\nExplicando:\nNos idos de 2009 tive a felicidade de conhecer The Office, que se trata de uma série de comédia em formato de pseudodocumentário exibida pela rede estadunidense NBC (No Brasil dá pra assistir pela prime, bebês 😘. Esta é minha série favorita do coração (🦆 Boy, Camura, Sarah).\n\n\n\n\n\nFigure 1: Yeah baby!\n\n\n\n\nVoltando:\nApós checar do que se tratava o banco de dados (BD), resolvi trazer pra cá, e mexer um pouco só pra ver o que conseguimos extrair dele.\nPensei em mostrar somente uma breve manipulação de dados agora, depois podemos transformar essas tabelas em belos gráficos 😉."
  },
  {
    "objectID": "posts/004-explorando-the-office/index.html#mãos-no-computador",
    "href": "posts/004-explorando-the-office/index.html#mãos-no-computador",
    "title": "Explorando o mundo de The Office",
    "section": "Mãos no computador",
    "text": "Mãos no computador\nPor primeiro, devemos fazer o download dos dados. Há, pelo menos, três formas diferentes de fazer isso:\n\nUtilizando o próprio BD cedido pelo usuário misunderstoodpoetry.\n\n\nOs dados estão em uma planilha do google sheets;\nPara ter acesso pelo R, podemos utilizar o pacote googlesheets4, através da função read_sheet(), dessa forma:\n\n\n# carregando o pacote necessário\nlibrary(googlesheets4) # ler diretamente do google sheets\n\n# colocando o BD em um objeto do tipo dataframe (ou tibble)\ntheoffice <- read_sheet(\"https://docs.google.com/spreadsheets/d/18wS5AAwOh8QO95RwHLS95POmSNKA2jjzdt0phrxeAE0/edit#gid=747974534\")\n\n\nUtilizando o BD fornecido pelo usuário Fabrizio Cominetti, lá no Kaggle (em outro post trago mais detalhes sobre);\n\n\nPodemos fazer o download do BD utilizando uma API do Kaggle, utilizando o pacote kaggler;\n\n\nBaixando os dados manualmente.\n\n\nPara ler o arquivo utilizarei o pacote readr, da família tidyverse:\n\n\n# carregando os pacotes necessários\nlibrary(dplyr) # manipulação de dados\nlibrary(readr) # função read_csv()\n\n# lendo o arquivo \"the-office_lines.csv.zip\"\ntheoffice <- read_csv(here::here(\"posts/004-explorando-the-office/the-office-lines - scripts.csv\"),\n                      show_col_types = FALSE)\n\n# resumindo os dados\nglimpse(theoffice)\n\nRows: 59,909\nColumns: 7\n$ id        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ season    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ episode   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ scene     <dbl> 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 7, …\n$ line_text <chr> \"All right Jim. Your quarterlies look very good. How are thi…\n$ speaker   <chr> \"Michael\", \"Jim\", \"Michael\", \"Jim\", \"Michael\", \"Michael\", \"M…\n$ deleted   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n\n\nComo podemos ver, o objeto theoffice contém 7 variáveis e 59.909 observações (ou “falas” dos personagens).\nPara melhor visualização (somente das 6 primeiras observações):\n\nknitr::kable(head(theoffice, n = 6))\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nseason\nepisode\nscene\nline_text\nspeaker\ndeleted\n\n\n\n\n1\n1\n1\n1\nAll right Jim. Your quarterlies look very good. How are things at the library?\nMichael\nFALSE\n\n\n2\n1\n1\n1\nOh, I told you. I couldn’t close it. So…\nJim\nFALSE\n\n\n3\n1\n1\n1\nSo you’ve come to the master for guidance? Is this what you’re saying, grasshopper?\nMichael\nFALSE\n\n\n4\n1\n1\n1\nActually, you called me in here, but yeah.\nJim\nFALSE\n\n\n5\n1\n1\n1\nAll right. Well, let me show you how it’s done.\nMichael\nFALSE\n\n\n6\n1\n1\n2\n[on the phone] Yes, I’d like to speak to your office manager, please. Yes, hello. This is Michael Scott. I am the Regional Manager of Dunder Mifflin Paper Products. Just wanted to talk to you manager-a-manger. [quick cut scene] All right. Done deal. Thank you very much, sir. You’re a gentleman and a scholar. Oh, I’m sorry. OK. I’m sorry. My mistake. [hangs up] That was a woman I was talking to, so… She had a very low voice. Probably a smoker, so… [Clears throat] So that’s the way it’s done.\nMichael\nFALSE\n\n\n\n\n\n\n\n\n\n\nTá bom, Michael.\n\n\n\n\n\nRenomeando as variáveis para pt-br\nAgora, já que é uma postagem em português, vamos traduzir os nomes das variáveis.\n\ntheoffice_pt <- theoffice %>% \n    rename(temporada = season,\n           episodio = episode,\n           cena = scene,\n           fala = line_text,\n           personagem = speaker,\n           deletado = deleted)\n\nknitr::kable(head(theoffice_pt, n = 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntemporada\nepisodio\ncena\nfala\npersonagem\ndeletado\n\n\n\n\n1\n1\n1\n1\nAll right Jim. Your quarterlies look very good. How are things at the library?\nMichael\nFALSE\n\n\n2\n1\n1\n1\nOh, I told you. I couldn’t close it. So…\nJim\nFALSE\n\n\n\n\n\nNomes das variáveis alteradas.\n\n\nNúmero de falas por temporada\nBom, dessa vez vamos ver quantas falas existiram em cada uma das 9 temporadas da série:\n\ntheoffice_pt %>% \n    # agrupando por temporada\n    group_by(temporada) %>% \n    # somando as observações\n    tally()\n\n# A tibble: 9 × 2\n  temporada     n\n      <dbl> <int>\n1         1  1996\n2         2  7492\n3         3  7483\n4         4  5642\n5         5  8170\n6         6  7630\n7         7  7302\n8         8  7083\n9         9  7111\n\n\nA função tally() faz uma soma do número de vezes que certo grupo aparece, dada na função group_by(). Nesse exemplo acima, ele pega cada um dos grupos dentro de temporada, e identifica quantas observações há em cada uma.\nA temporada que teve mais falas foi a 5ª (que, inclusive, considero a melhor!), com 8170 falas.\n\n\nNúmero de falas por personagem no 1º episódio\nPodemos também filtrar algumas informações, para ser mais específicos. Por exemplo, se quisermos saber quantas falas foram feitas por personagem no primeiro episódio da primeira temporada (a mais odiada):\n\ntheoffice_pt %>% \n    # filtramos a temporada 1 e o episódio 1\n    filter(temporada == 1 & episodio == 1) %>% \n    # agrupamos por personagem\n    group_by(personagem) %>% \n    # fazemos a somatória de observações\n    tally() %>% \n    # organizando do número maior para o menor\n    arrange(desc(n))\n\n# A tibble: 16 × 2\n   personagem                  n\n   <chr>                   <int>\n 1 Michael                    97\n 2 Pam                        46\n 3 Jim                        37\n 4 Dwight                     35\n 5 Jan                        12\n 6 Ryan                       10\n 7 Oscar                       6\n 8 Angela                      5\n 9 Roy                         5\n10 Stanley                     5\n11 Documentary Crew Member     3\n12 Todd Packer                 3\n13 Kevin                       2\n14 Phyllis                     2\n15 Man                         1\n16 Michel                      1"
  },
  {
    "objectID": "posts/004-explorando-the-office/index.html#finalizando",
    "href": "posts/004-explorando-the-office/index.html#finalizando",
    "title": "Explorando o mundo de The Office",
    "section": "Finalizando",
    "text": "Finalizando\nAcho que já deu pra dar uma breve ideia do que conseguimos fazer com algumas poucas funções, em breve vamos explorar um pouco mais esses dados, e também brincar com visualizações.\n\n\n\n\n\nÉ festa!\n\n\n\n\nNesta sessão apresentei os seguintes pacotes:\n\ndplyr\ngooglesheets4\nreadr\n\nAté mais!\nCheers,\n\n\n\nAdendo: O Felipe Magalhães me sugeriu ver quantas vezes falaram “That’s what she said!” na série, não aguentei de curiosidade. Aí está:\n\n# pacote para tratar com strings, também do tidyverse\nlibrary(stringr)\n\ntwss <- theoffice_pt %>% \n    # filtrando as falas que contém a famigerada frase\n    filter(str_detect(fala, \"[Tt]hat's what she said?\"))\n\nglimpse(twss)\n\nRows: 35\nColumns: 7\n$ id         <dbl> 2545, 2547, 5325, 6322, 6353, 7644, 8872, 9624, 10904, 1259…\n$ temporada  <dbl> 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,…\n$ episodio   <dbl> 2, 2, 10, 12, 12, 17, 21, 1, 5, 10, 12, 17, 17, 20, 22, 2, …\n$ cena       <dbl> 24, 24, 2, 33, 38, 6, 22, 49, 59, 49, 41, 9, 23, 11, 68, 6,…\n$ fala       <chr> \"That's what she said. Pam?\", \"That's what she sai [clears …\n$ personagem <chr> \"Michael\", \"Michael\", \"Michael\", \"Dwight\", \"Michael\", \"Mich…\n$ deletado   <lgl> FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALS…\n\n\n35 falas com “That’s what she said”!\n\ntwss %>% \n    group_by(personagem) %>% \n    tally() %>% \n    arrange(desc(n))\n\n# A tibble: 11 × 2\n   personagem              n\n   <chr>               <int>\n 1 Michael                23\n 2 Dwight                  3\n 3 Creed                   1\n 4 David                   1\n 5 Deposition Reporter     1\n 6 Everyone                1\n 7 Holly                   1\n 8 Jan                     1\n 9 Jim                     1\n10 Pam                     1\n11 Stanley                 1\n\n\nClaro que quem mais falou foi o Michael, mas o VAR vai ser chamado pra checar esse banco de dados aí 😅!"
  },
  {
    "objectID": "posts/005-pipe/index.html",
    "href": "posts/005-pipe/index.html",
    "title": "Como e porquê usar o pipe ( %>% e |> )?",
    "section": "",
    "text": "Demonstrar o conceito de tidy data.\nUtilizar o pipe (%>% e |>)."
  },
  {
    "objectID": "posts/005-pipe/index.html#história",
    "href": "posts/005-pipe/index.html#história",
    "title": "Como e porquê usar o pipe ( %>% e |> )?",
    "section": "História",
    "text": "História\nDado que este blog é dedicado para pessoas em quaiquer nível de aprendizado em R, resolvi fazer uma série de posts explicando funções básicas para a manipulação de dados.\nConsidero a linguagem R bastante objetiva na sua sintaxe básica, e a forma de estruturação desenvolvida pelo Hadley e equipe, o tidy data, torna a linguagem ainda mais “simples” para que nós, meros mortais, possamos entendê-la.\nO tidy data, basicamente, é a padronização dos bancos de dados. Para que seja considerado tidy, o banco de dados obedecer as seguintes regras:\n\nCada coluna é uma variável;\nCada linha é uma observação;\nCada célula possui somente um valor.\n\nO antônimo de uma tabela tidy, é uma tabela messy (do inglês, bagunçada).\n\nO dia-a-dia de um errezêiro é uma jornada de pegar dados “crus” (raw) e transformá-los em dados limpos e utilizáveis. Nessa jornada, são realizadas transformações de variáveis, filtragens, sumários, etc.\nPara uma melhor leitura dos códigos por nós, seres humanes, foi desenvolvido o operador pipe %>%. O pipe desse formato têm sido usado há algum tempo no pacote magrittr, e sua função é unir uma sequência de funções, pegando o resultado anterior, e utilizando na próxima linha.\n\nDesde a versão R 4.1, o R estabeleceu o uso de um pipe próprio, embutido no seu código fonte, é o |>. Existem algumas diferenças na forma que o R lê ambos, mas isso fica para outro post.\n\nPara ilustrar, utilizarei os passos para fazer um bolo:\n\nJuntar ingredientes\nAssar;\nMexer;\nDecorar;\nCortar;\nServir.\n\nNa sintaxe do R base, essa seria a forma de utilização:\n\nservir(cortar(decorar(assar(mexer(ingredientes)))))\n\n   5  (  4   (   3   (  2  (  1  (     0      )))))\n\nOu seja,\n\nJuntamos os ingredientes;\nMexemos 0;\nAssamos o resultado de 1;\nDecoramos o resultado de 2;\nCortamos o resultado de 3;\nServimos o resultado de 4.\n\n\nPorém, utilizando o pipe, o código ficaria assim:\n\nO atalho de teclado para o pipe é CONTROL + SHIFT + M.\n\n\ningredientes %>%    # 0\n    mexer() %>%     # 1\n    assar() %>%     # 2\n    decorar() %>%   # 3\n    cortar() %>%    # 4\n    servir()        # 5\n\nOu, ilustrando:\n\n\n\n\n\nNa hora que estamos trabalhando com dados reais, isso faz uma grande diferença."
  },
  {
    "objectID": "posts/005-pipe/index.html#mãos-no-r",
    "href": "posts/005-pipe/index.html#mãos-no-r",
    "title": "Como e porquê usar o pipe ( %>% e |> )?",
    "section": "Mãos no R",
    "text": "Mãos no R\nPara melhor ilustrar, vamos fazer umas manipulações simples em uns bancos de dados, utilizando 3 métodos diferentes: aninhado, objetos múltiplos e pipes.\nO objetivo é:\n\nCarregar o banco de dados starwars;\nFiltrar por indivíduos com altura maior que 150cm;\nAgrupar por especie e por gênero;\nSumariar pela média;\nOrdenar do valor maior para o menor.\n\n\nUtilizarei o banco de dados starwars, incluído no pacote dados. Saiba mais sobre o pacote e a iniciativa aqui: https://cienciadedatos.github.io/dados/\n\n\n# para instalar o pacote pelo GitHub:\nremotes::install_github(\"cienciadedatos/dados\")\n\n\n# para instalar o pacote pelo CRAN:\ninstall.packages(\"dados\")\n\n\n# para carregar os pacotes:\nlibrary(dados)\nlibrary(dplyr)\n\n# para carregar o banco de dados `dados_starwars`, e ver um sumário\nglimpse(dados_starwars)\n\nRows: 87\nColumns: 14\n$ nome            <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Le…\n$ altura          <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 1…\n$ massa           <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0…\n$ cor_do_cabelo   <chr> \"Loiro\", NA, NA, \"Nenhum\", \"Castanho\", \"Castanho, Cinz…\n$ cor_da_pele     <chr> \"Branca clara\", \"Ouro\", \"Branca, Azul\", \"Branca\", \"Cla…\n$ cor_dos_olhos   <chr> \"Azul\", \"Amarelo\", \"Vermelho\", \"Amarelo\", \"Castanho\", …\n$ ano_nascimento  <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 5…\n$ sexo_biologico  <chr> \"Macho\", \"Nenhum\", \"Nenhum\", \"Macho\", \"Fêmea\", \"Macho\"…\n$ genero          <chr> \"Masculino\", \"Masculino\", \"Masculino\", \"Masculino\", \"F…\n$ planeta_natal   <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan…\n$ especie         <chr> \"Humano\", \"Droide\", \"Droide\", \"Humano\", \"Humano\", \"Hum…\n$ filmes          <list> <\"The Empire Strikes Back\", \"Revenge of the Sith\", \"R…\n$ veiculos        <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>,…\n$ naves_espaciais <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced…\n\n\nAninhado\n\narrange(\n    summarise(\n        group_by(\n            filter(dados_starwars, altura > 150), \n            genero), \n        media_massa = mean(massa, na.rm = TRUE)),\n    desc(media_massa))\n\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n\n\nObjetos múltiplos\n\na <- filter(dados_starwars, altura > 150)\nb <- group_by(a, genero)\nc <- summarise(b, media_massa = mean(massa, na.rm = TRUE))\nd <- arrange(c, desc(media_massa))\nd\n\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n\n\nPipe magrittr\n\ndados_starwars %>% \n    filter(altura > 150) %>% \n    group_by(genero) %>% \n    summarise(media_massa = mean(massa, na.rm = TRUE)) %>% \n    arrange(desc(media_massa))\n\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n\n\nPipe R base\n\ndados_starwars |> \n    filter(altura > 150) |> \n    group_by(genero) |> \n    summarise(media_massa = mean(massa, na.rm = TRUE)) |> \n    arrange(desc(media_massa))\n\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48"
  },
  {
    "objectID": "posts/005-pipe/index.html#finalizando",
    "href": "posts/005-pipe/index.html#finalizando",
    "title": "Como e porquê usar o pipe ( %>% e |> )?",
    "section": "Finalizando",
    "text": "Finalizando\nEu sou super fã do pipe magrittr %>%, e estou tentando me acostumar com o pipe built-in do R |>, para melhorar a performance de meus códigos.\nAs formas aninhadas e de múltiplos objetos utilizei bastante enquanto aprendia a linguagem, mas dificilmente as utilizo hoje em dia.\nE então, qual forma de programar em R você prefere?\nAté a próxima!\nCheers,"
  }
]