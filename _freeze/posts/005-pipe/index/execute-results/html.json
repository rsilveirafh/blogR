{
  "hash": "73bb20c73975558b29fb2dbd9b1ce2ff",
  "result": {
    "markdown": "---\ntitle: \"Como e porquê usar o *pipe* ( `%>%`  e  `|>` )?\"\nsubtitle: \"Entendendo o mundo do *tidy data*\"\nauthor: \"Ricardo\"\ndate: \"2022-10-18\"\ncategories: [pipe, pt-br, R, tidyverse]\nimage: \"https://magrittr.tidyverse.org/logo.png\"\ndraft: false\n---\n\n\n\n\n## Sobre o que é essa postagem?\n\n-   Demonstrar o conceito de *tidy data*.\n-   Utilizar o *pipe* (`%>%` e `|>`).\n\n## História\n\nDado que este blog é dedicado para pessoas em quaisquer nível de aprendizado em `R`, resolvi fazer uma série de posts explicando funções básicas para a manipulação de dados.\n\nConsidero a linguagem `R` bastante objetiva na sua sintaxe básica, e a forma de estruturação desenvolvida pelo [Hadley](https://twitter.com/hadleywickham) e equipe, o [*tidy data*](https://vita.had.co.nz/papers/tidy-data.html), torna a linguagem ainda mais \"simples\" para que nós, meros mortais, possamos entendê-la.\n\nO *tidy data*, basicamente, é a padronização dos bancos de dados. Para que seja considerado *tidy*, o banco de dados deve obedecer às seguintes regras:\n\n1.  Cada **coluna** é uma [variável]{.underline};\n2.  Cada **linha** é uma [observação]{.underline};\n3.  Cada **célula** possui somente um valor.\n\nO antônimo de uma tabela *tidy*, é uma tabela *messy* (do inglês, bagunçada).\n\n------------------------------------------------------------------------\n\nO dia-a-dia de um errezêiro é uma jornada de pegar dados \"crus\" (*raw*) e transformá-los em dados limpos e utilizáveis. Nessa jornada, são realizadas transformações de variáveis, filtragens, sumários, etc.\n\nPara uma melhor leitura dos códigos por nós, seres humanes, foi desenvolvido o operador *pipe* `%>%`. O *pipe* nesse formato têm sido usado há algum tempo no pacote `magrittr`, e sua função é unir uma sequência de funções, pegando o resultado anterior, e utilizando na próxima linha.\n\n> Desde a versão R 4.1, o R estabeleceu o uso de um *pipe* próprio, embutido no seu código fonte, é o `|>`.\n> Existem algumas diferenças na forma que o R lê ambos, mas isso fica para outro post.\n\nPara ilustrar, utilizarei os passos para fazer um bolo:\n\n0.  Juntar ingredientes\n1.  Assar;\n2.  Mexer;\n3.  Decorar;\n4.  Cortar;\n5.  Servir.\n\nNa sintaxe do `R` base, essa seria a forma de utilização:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nservir(cortar(decorar(assar(mexer(ingredientes)))))\n\n   5  (  4   (   3   (  2  (  1  (     0      )))))\n```\n:::\n\n\nOu seja,\n\n0.  Juntamos os ingredientes;\n1.  Mexemos 0;\n2.  Assamos o resultado de 1;\n3.  Decoramos o resultado de 2;\n4.  Cortamos o resultado de 3;\n5.  Servimos o resultado de 4.\n\n------------------------------------------------------------------------\n\nPorém, utilizando o *pipe*, o código ficaria assim:\n\n> O atalho de teclado para o pipe é `CONTROL + SHIFT + M`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ningredientes %>%    # 0\n\tmexer() %>%     # 1\n\tassar() %>%     # 2\n\tdecorar() %>%   # 3\n\tcortar() %>%    # 4\n\tservir()        # 5\n```\n:::\n\n\n\nOu, ilustrando:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](baking.gif)\n:::\n:::\n\n\n\nNa hora que estamos trabalhando com dados reais, isso faz uma grande diferença.\n\n\n## Mãos no R\n\nPara melhor ilustrar, vamos fazer umas manipulações simples em uns bancos de dados, utilizando 3 métodos diferentes: *aninhado*, *objetos múltiplos* e *pipes*.\n\nO objetivo é:\n\n1. Carregar o banco de dados `starwars`;\n2. Filtrar por indivíduos com *altura* [maior que 150cm]{.underline};\n3. Agrupar por *gênero*;\n3. Sumariar pela [média]{.underline};\n5. Ordenar do valor *maior* para o *menor.*\n\n> Utilizarei o banco de dados `starwars`, incluído no pacote `dados`.\n> Saiba mais sobre o pacote e a iniciativa aqui: [https://cienciadedatos.github.io/dados/](https://cienciadedatos.github.io/dados/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# para instalar o pacote pelo GitHub:\nremotes::install_github(\"cienciadedatos/dados\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# para instalar o pacote pelo CRAN:\ninstall.packages(\"dados\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# para carregar os pacotes:\nlibrary(dados)\nlibrary(dplyr)\n\n# para carregar o banco de dados `dados_starwars`, e ver um sumário\nglimpse(dados_starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 87\nColumns: 14\n$ nome            <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Le…\n$ altura          <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 1…\n$ massa           <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0…\n$ cor_do_cabelo   <chr> \"Loiro\", NA, NA, \"Nenhum\", \"Castanho\", \"Castanho, Cinz…\n$ cor_da_pele     <chr> \"Branca clara\", \"Ouro\", \"Branca, Azul\", \"Branca\", \"Cla…\n$ cor_dos_olhos   <chr> \"Azul\", \"Amarelo\", \"Vermelho\", \"Amarelo\", \"Castanho\", …\n$ ano_nascimento  <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 5…\n$ sexo_biologico  <chr> \"Macho\", \"Nenhum\", \"Nenhum\", \"Macho\", \"Fêmea\", \"Macho\"…\n$ genero          <chr> \"Masculino\", \"Masculino\", \"Masculino\", \"Masculino\", \"F…\n$ planeta_natal   <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan…\n$ especie         <chr> \"Humano\", \"Droide\", \"Droide\", \"Humano\", \"Humano\", \"Hum…\n$ filmes          <list> <\"The Empire Strikes Back\", \"Revenge of the Sith\", \"R…\n$ veiculos        <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>,…\n$ naves_espaciais <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced…\n```\n:::\n:::\n\n\n\n\n**[Aninhado]{.underline}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(\n\tsummarise(\n\t\tgroup_by(\n\t\t\tfilter(dados_starwars, altura > 150), \n\t\t\tgenero), \n\t\tmedia_massa = mean(massa, na.rm = TRUE)),\n\tdesc(media_massa))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n```\n:::\n:::\n\n\n\n**[Objetos múltiplos]{.underline}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- filter(dados_starwars, altura > 150)\nb <- group_by(a, genero)\nc <- summarise(b, media_massa = mean(massa, na.rm = TRUE))\nd <- arrange(c, desc(media_massa))\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n```\n:::\n:::\n\n\n\n**[Pipe `magrittr`]{.underline}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_starwars %>% \n\tfilter(altura > 150) %>% \n\tgroup_by(genero) %>% \n\tsummarise(media_massa = mean(massa, na.rm = TRUE)) %>% \n\tarrange(desc(media_massa))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n```\n:::\n:::\n\n\n\n**[Pipe R `base`]{.underline}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_starwars |> \n\tfilter(altura > 150) |> \n\tgroup_by(genero) |> \n\tsummarise(media_massa = mean(massa, na.rm = TRUE)) |> \n\tarrange(desc(media_massa))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  genero    media_massa\n  <chr>           <dbl>\n1 Masculino       119. \n2 Feminino         55.4\n3 <NA>             48  \n```\n:::\n:::\n\n\n\n\n## Finalizando\n\nEu sou super fã do pipe `magrittr` `%>%`, e estou tentando me acostumar com o *pipe built-in* do `R` `|>`, para melhorar a performance de meus códigos. \n\nAs formas aninhadas e de múltiplos objetos utilizei bastante enquanto aprendia a linguagem, mas dificilmente as utilizo hoje em dia.\n\nE então, qual forma de programar em `R` você prefere?\n\nAté a próxima!\n\nCheers,\n\nR.\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}